@using CrossfitLeaderboard.Entities
@model CrossfitLeaderboard.Models.LeaderboardViewModel
@{
    ViewData["Title"] = "CrossFit Leaderboard";
}

<!-- Menu Superior -->
<nav class="navbar navbar-expand-lg navbar-dark bg-primary mb-4">
    <div class="container-fluid">
        <span class="navbar-brand fw-bold">🏆 CrossFit Leaderboard</span>
        <div class="navbar-nav ms-auto">
            <a class="nav-link active" href="/">
                <i class="fas fa-home"></i> Home
            </a>
            <a class="nav-link" href="/Categories">
                <i class="fas fa-tags"></i> Categories
            </a>
            <a class="nav-link" href="/Teams">
                <i class="fas fa-users"></i> Teams
            </a>
            <a class="nav-link" href="/Workouts">
                <i class="fas fa-dumbbell"></i> Workouts
            </a>
        </div>
    </div>
</nav>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="display-4 text-primary">🏆 Leaderboard Desafio Ceros</h1>
                <div class="d-flex gap-2">
                    <select id="categoryFilter" class="form-select" style="width: auto;">
                        <option value="">Todas as Categorias</option>
                        @if (ViewBag.Categories != null)
                        {
                            @foreach (var category in ViewBag.Categories)
                            {
                                var isSelected = ViewBag.CategoryId?.ToString() == category.Id.ToString();
                                <option value="@category.Id" selected="@isSelected">@category.Name</option>
                            }
                        }
                    </select>
                    <button id="resetBtn" class="btn btn-warning">
                        <i class="fas fa-redo"></i> Reset Leaderboard
                    </button>
                    <a href="/Home/DownloadPdf" class="btn btn-success" target="_blank">
                        <i class="fas fa-file-pdf"></i> Download PDF
                    </a>
                </div>
            </div>

            @if (!Model.Teams.Any() || !Model.Workouts.Any())
            {
                <div class="alert alert-info" role="alert">
                    <h4 class="alert-heading">📋 Bem-vindo ao CrossFit Leaderboard!</h4>
                    <p>Para começar a usar o leaderboard, você precisa seguir esta ordem:</p>
                    <ol>
                        <li><strong>Criar categorias</strong> - Defina as categorias da competição (ex: RX Masculino, Scale Feminino)</li>
                        <li><strong>Criar equipes</strong> - Adicione as equipes que participarão da competição (cada uma deve pertencer a uma categoria)</li>
                        <li><strong>Criar workouts</strong> - Defina os exercícios que serão realizados (podem ser aplicados a múltiplas categorias)</li>
                    </ol>
                    <hr>
                    <p class="mb-0">
                        <a href="/Categories" class="btn btn-info me-2">
                            <i class="fas fa-tags"></i> Gerenciar Categorias
                        </a>
                        <a href="/Teams" class="btn btn-primary me-2">
                            <i class="fas fa-users"></i> Gerenciar Equipes
                        </a>
                        <a href="/Workouts" class="btn btn-success">
                            <i class="fas fa-dumbbell"></i> Gerenciar Workouts
                        </a>
                    </p>
                </div>
            }
            else
            {
                <!-- Leaderboards Separados por Categoria -->
                
                    var teamsByCategory = Model.Teams
                            .Where(t => t.Category != null)
                            .GroupBy(t => t.Category)
                            .OrderBy(g => g.Key.Name)
                            .ToList();
                

                @foreach (var categoryGroup in teamsByCategory)
                {
                    var category = categoryGroup.Key;
                    var teamsInCategory = categoryGroup
                        .OrderBy(t => t.TotalPoints)
                        .ThenByDescending(t => t.FirstPlaceCount)
                        .ThenByDescending(t => t.SecondPlaceCount)
                        .ToList();
                    
                    <!-- Workouts aplicáveis a esta categoria -->
                    var workoutsForCategory = Model.Workouts
                        .Where(w => w.WorkoutCategories.Any(wc => wc.CategoryId == category.Id))
                        .ToList();

                    @if (teamsInCategory.Any() && workoutsForCategory.Any())
                    {
                        <div class="card shadow mb-4">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">
                                    <i class="fas fa-trophy"></i> 
                                    @category.Name
                                    @if (!string.IsNullOrEmpty(category.Description))
                                    {
                                        <small class="d-block text-light">@category.Description</small>
                                    }
                                </h5>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-bordered table-hover mb-0 leaderboard-table" data-category-id="@category.Id">
                                        <thead class="table-dark">
                                            <tr>
                                                <th class="text-center" style="width: 200px;">Equipe</th>
                                                @foreach (var workout in workoutsForCategory)
                                                {
                                                    <th class="text-center">
                                                        <div class="fw-bold">@workout.Name</div>
                                                        <small class="text-muted">@workout.Description</small>
                                                        <br>
                                                        <span class="badge bg-info">@workout.Unit</span>
                                                    </th>
                                                }
                                                <th class="text-center bg-success text-white" style="width: 100px;">
                                                    <strong>Total<br>Pontos</strong>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var team in teamsInCategory)
                                            {
                                                <tr class="@(team.TotalPoints > 0 ? "table-light" : "")">
                                                    <td class="fw-bold">
                                                        @team.Name
                                                    </td>
                                                    @foreach (var workout in workoutsForCategory)
                                                    {
                                                        var result = Model.ResultsMatrix[team.Id][workout.Id];
                                                        <td class="text-center position-relative">
                                                            <div class="input-group input-group-sm">
                                                                @if (workout.Type == WorkoutType.Time)
                                                                {
                                                                    <input type="text" 
                                                                           class="form-control result-input time-input" 
                                                                           data-team-id="@team.Id" 
                                                                           data-workout-id="@workout.Id"
                                                                           data-workout-type="time"
                                                                           value="@(result.Result.HasValue && result.Result > 0 ? FormatTimeResult(result.Result.Value) : "")"
                                                                           placeholder="0:00"
                                                                           pattern="[0-9]+:[0-5][0-9]"
                                                                           title="Formato: minutos:segundos (ex: 10:30)">
                                                                }
                                                                else if (workout.Type == WorkoutType.Repetitions)
                                                                {
                                                                    <input type="number" 
                                                                           class="form-control result-input" 
                                                                           data-team-id="@team.Id" 
                                                                           data-workout-id="@workout.Id"
                                                                           data-workout-type="repetitions"
                                                                           value="@(result.Result.HasValue && result.Result > 0 ? FormatInteger(result.Result.Value) : "")"
                                                                           placeholder="0"
                                                                           step="1"
                                                                           min="0">
                                                                }
                                                                else if (workout.Type == WorkoutType.Weight)
                                                                {
                                                                    <input type="text" 
                                                                           class="form-control result-input weight-input" 
                                                                           data-team-id="@team.Id" 
                                                                           data-workout-id="@workout.Id"
                                                                           data-workout-type="weight"
                                                                           value="@(result.Result.HasValue && result.Result > 0 ? FormatDecimal(result.Result.Value) : "")"
                                                                           placeholder="0,00"
                                                                           title="Digite o peso usando vírgula como separador decimal (ex: 200,50)">
                                                                }
                                                                else
                                                                {
                                                                    <input type="number" 
                                                                           class="form-control result-input" 
                                                                           data-team-id="@team.Id" 
                                                                           data-workout-id="@workout.Id"
                                                                           data-workout-type="number"
                                                                           value="@(result.Result.HasValue && result.Result > 0 ? FormatDecimal(result.Result.Value) : "")"
                                                                           placeholder="0"
                                                                           step="0.01"
                                                                           min="0">
                                                                }
                                                            </div>
                                                            @if (result.Position > 0)
                                                            {
                                                                <div class="position-badge">
                                                                    <span class="badge @GetPositionBadgeClass(result.Position)">
                                                                        @GetPositionText(result.Position)
                                                                    </span>
                                                                </div>
                                                            }
                                                        </td>
                                                    }
                                                    <td class="text-center fw-bold @(team.TotalPoints > 0 ? "bg-success text-white" : "")">
                                                        @team.TotalPoints
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }
                }

                @if (!teamsByCategory.Any())
                {
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>Nenhum time encontrado!</strong>
                        <br>Você precisa criar times associados a categorias para ver os leaderboards.
                    </div>
                }
            }

                <!-- Instruções -->
                <div class="row mt-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">📋 Instruções</h6>
                            </div>
                            <div class="card-body">
                                <ul class="mb-0">
                                    <li>Digite o resultado de cada equipe em cada workout</li>
                                    <li>Para <strong>repetições</strong> e <strong>peso</strong>: maior valor = melhor posição</li>
                                    <li>Para <strong>tempo</strong>: menor valor = melhor posição</li>
                                    <li>Posições: 1º = 1 ponto, 2º = 2 pontos, etc.</li>
                                    <li><strong>Vencedor</strong>: equipe com menor total de pontos</li>
                                    <li><strong>Desempate</strong>: 1º critério = mais 1º lugares, 2º critério = mais 2º lugares</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/leaderboard.js"></script>
    <script>
        // Filtro de categoria
        document.getElementById('categoryFilter').addEventListener('change', function() {
            const categoryId = this.value;
            const currentUrl = new URL(window.location);
            
            if (categoryId) {
                currentUrl.searchParams.set('categoryId', categoryId);
            } else {
                currentUrl.searchParams.delete('categoryId');
            }
            
            window.location.href = currentUrl.toString();
        });
    </script>
}

@functions {
    public string GetPositionBadgeClass(int position)
    {
        return position switch
        {
            1 => "bg-warning text-dark",
            2 => "bg-secondary",
            3 => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }

    public string GetPositionText(int position)
    {
        return position switch
        {
            1 => "🥇 1º",
            2 => "🥈 2º",
            3 => "🥉 3º",
            4 => "4º",
            5 => "5º",
            _ => ""
        };
    }

    public string FormatTimeResult(decimal timeInSeconds)
    {
        int minutes = (int)(timeInSeconds / 60);
        int seconds = (int)(timeInSeconds % 60);
        return $"{minutes}:{seconds:D2}";
    }

    public string FormatInteger(decimal number)
    {
        return ((int)number).ToString();
    }

    public string FormatDecimal(decimal number)
    {
        return number.ToString("N2", new System.Globalization.CultureInfo("pt-BR"));
    }
}
