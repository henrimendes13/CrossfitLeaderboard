// <auto-generated />
using System;
using CrossfitLeaderboard.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrossfitLeaderboard.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250730184839_AddTiebreakerCriteria")]
    partial class AddTiebreakerCriteria
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("CrossfitLeaderboard.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstPlaceCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("SecondPlaceCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name", "CategoryId")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.WorkoutCategory", b =>
                {
                    b.Property<int>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WorkoutId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("WorkoutCategories");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.WorkoutResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<int>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("Result")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.HasIndex("TeamId", "WorkoutId")
                        .IsUnique();

                    b.ToTable("WorkoutResults");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.Team", b =>
                {
                    b.HasOne("CrossfitLeaderboard.Entities.Category", "Category")
                        .WithMany("Teams")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.WorkoutCategory", b =>
                {
                    b.HasOne("CrossfitLeaderboard.Entities.Category", "Category")
                        .WithMany("WorkoutCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrossfitLeaderboard.Entities.Workout", "Workout")
                        .WithMany("WorkoutCategories")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.WorkoutResult", b =>
                {
                    b.HasOne("CrossfitLeaderboard.Entities.Team", "Team")
                        .WithMany("WorkoutResults")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrossfitLeaderboard.Entities.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.Category", b =>
                {
                    b.Navigation("Teams");

                    b.Navigation("WorkoutCategories");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.Team", b =>
                {
                    b.Navigation("WorkoutResults");
                });

            modelBuilder.Entity("CrossfitLeaderboard.Entities.Workout", b =>
                {
                    b.Navigation("WorkoutCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
